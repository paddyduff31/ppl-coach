name: PPL Coach CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  DOTNET_VERSION: '9.0'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      web: ${{ steps.changes.outputs.web }}
      mobile: ${{ steps.changes.outputs.mobile }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'apps/backend/**'
            web:
              - 'apps/web/**'
              - 'shared/**'
            mobile:
              - 'apps/mobile/**'
              - 'shared/**'
            shared:
              - 'shared/**'

  backend-test:
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ppl_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore apps/backend/PplCoach.sln

      - name: Build
        run: dotnet build apps/backend/PplCoach.sln --no-restore

      - name: Test
        run: dotnet test apps/backend/PplCoach.sln --no-build --verbosity normal
        env:
          ConnectionStrings__DefaultConnection: Host=localhost;Database=ppl_test;Username=postgres;Password=postgres

  web-test:
    needs: changes
    if: needs.changes.outputs.web == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate API client
        run: |
          # Start backend for API generation
          cd apps/backend && dotnet run --project src/PplCoach.Api/PplCoach.Api.csproj &
          sleep 30
          npm run api:generate

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Test
        run: npm run test:web

      - name: Build
        run: npm run build:web

  e2e-tests:
    needs: [backend-test, web-test]
    if: always() && (needs.backend-test.result == 'success' || needs.backend-test.result == 'skipped') && (needs.web-test.result == 'success' || needs.web-test.result == 'skipped')
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ppl_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build applications
        run: |
          npm run build:backend
          npm run build:web

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          ConnectionStrings__DefaultConnection: Host=localhost;Database=ppl_test;Username=postgres;Password=postgres
          CI: true

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  mobile-build:
    needs: changes
    if: needs.changes.outputs.mobile == 'true' || needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          cache-dependency-path: apps/mobile/pnpm-lock.yaml

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: cd apps/mobile && pnpm install

      - name: Type check
        run: cd apps/mobile && pnpm type-check

      - name: Lint
        run: cd apps/mobile && pnpm lint

      - name: Test
        run: cd apps/mobile && pnpm test

      - name: EAS Build (Development)
        if: github.ref == 'refs/heads/develop'
        run: cd apps/mobile && pnpm build:development:android

  deploy-staging:
    needs: [backend-test, web-test, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment logic here

  deploy-production:
    needs: [backend-test, web-test, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment"
          # Add your production deployment logic here
