// Export the custom axios instance for direct use if needed
export { axiosInstance, customInstance } from './mutator/custom-instance';

// Export all generated API hooks and functions
export * from './generated/pplCoachApi';
export * from './generated/model';

// Export centralized utilities from both web and mobile apps
export * from './utils/pagination';
export * from './utils/query';
export * from './utils/health-check';
export { APIProvider, getQueryClient, useQueryClient } from './providers/api-provider';

// Import required types for manual session hooks
import { useMutation, useQuery, UseMutationOptions, UseQueryOptions } from '@tanstack/react-query';
import type { CreateSessionDto, WorkoutSessionDto } from './generated/model';
import { customInstance } from './mutator/custom-instance';

// Manual session creation hook (not generated by Orval)
export const useCreateSession = <TError = unknown>(
  options?: UseMutationOptions<WorkoutSessionDto, TError, CreateSessionDto>
) => {
  return useMutation({
    mutationFn: async (createSessionDto: CreateSessionDto): Promise<WorkoutSessionDto> => {
      const response = await customInstance<WorkoutSessionDto>({
        url: '/api/sessions',
        method: 'POST',
        data: createSessionDto,
      });
      return response;
    },
    ...options,
  });
};

// Manual session fetch hook (individual session by ID)
export const useGetSession = <TData = WorkoutSessionDto, TError = unknown>(
  sessionId: string,
  options?: UseQueryOptions<WorkoutSessionDto, TError, TData>
) => {
  return useQuery({
    queryKey: ['session', sessionId],
    queryFn: async () => {
      const response = await customInstance<WorkoutSessionDto>({
        url: `/api/sessions/${sessionId}`,
        method: 'GET',
      });
      return response;
    },
    enabled: !!sessionId,
    staleTime: 5 * 60 * 1000, // 5 minutes
    ...options,
  });
};

// Temporary stubs with realistic mock data for UI development:
export const useShuffleMovementsMutation = () => ({
  mutate: () => console.log('Mock shuffle movements'),
  isLoading: false
});

export const useDeleteSet = () => ({
  mutate: () => console.log('Mock delete set'),
  isLoading: false
});

export const useGetProfile = () => ({
  data: {
    id: 'mock-user-id',
    name: 'John Doe',
    email: 'john@example.com',
    height: 180,
    weight: 75,
    sex: 'Male',
    dateOfBirth: '1990-01-01'
  },
  isLoading: false,
  error: null
});

export const useCreateProfile = () => ({
  mutate: () => console.log('Mock create profile'),
  isLoading: false
});

export const useGetAllMovements = () => ({
  data: [
    {
      id: '1',
      name: 'Push-ups',
      primaryMuscleGroup: 1,
      secondaryMuscleGroups: [2],
      equipment: 1,
      description: 'Classic bodyweight chest exercise'
    },
    {
      id: '2',
      name: 'Bench Press',
      primaryMuscleGroup: 1,
      secondaryMuscleGroups: [2],
      equipment: 4,
      description: 'Barbell chest press'
    },
    {
      id: '3',
      name: 'Squats',
      primaryMuscleGroup: 3,
      secondaryMuscleGroups: [4, 5],
      equipment: 1,
      description: 'Bodyweight leg exercise'
    }
  ],
  isLoading: false,
  error: null
});

export const useGetUserSessions = () => ({
  data: [
    {
      id: 'session-1',
      date: '2025-09-22',
      dayType: 'Push',
      notes: 'Great workout!',
      userId: 'mock-user-id'
    },
    {
      id: 'session-2',
      date: '2025-09-21',
      dayType: 'Pull',
      notes: 'Focused on back',
      userId: 'mock-user-id'
    }
  ],
  isLoading: false,
  error: null
});

export const useGetProgressSummary = () => ({
  data: {
    totalSessions: 45,
    thisWeekSessions: 3,
    averageSessionsPerWeek: 4.2,
    totalVolume: 125000,
    personalRecords: 12
  },
  isLoading: false,
  error: null
});

export const useGetMuscleGroupProgress = () => ({
  data: {
    chest: { sessions: 15, volume: 35000, lastWorked: '2025-09-20' },
    back: { sessions: 18, volume: 42000, lastWorked: '2025-09-21' },
    legs: { sessions: 12, volume: 48000, lastWorked: '2025-09-19' }
  },
  isLoading: false,
  error: null
});

export const useGetMovementsByEquipment = () => ({
  data: [
    {
      id: '4',
      name: 'Dumbbell Press',
      primaryMuscleGroup: 1,
      equipment: 2,
      description: 'Dumbbell chest press'
    }
  ],
  isLoading: false,
  error: null
});

// Additional missing hooks that the web app needs:
export const useGetMovement = (id: string) => ({
  data: id ? {
    id,
    name: 'Sample Movement',
    primaryMuscleGroup: 1,
    secondaryMuscleGroups: [2],
    equipment: 1,
    description: 'Sample movement description'
  } : null,
  isLoading: false,
  error: null
});

export const useGetPersonalRecords = () => ({
  data: [
    { movementId: '1', weight: 100, reps: 8, date: '2025-09-20' },
    { movementId: '2', weight: 80, reps: 12, date: '2025-09-19' }
  ],
  isLoading: false,
  error: null
});

// Legacy aliases for renamed hooks (for backward compatibility)
// Note: This will be uncommented when the actual hook is generated
// export { useShuffleMovements as useShuffleMovementsMutation } from './generated/pplCoachApi';

// Note: Generated API hooks and types will be available after running `npm run api:generate`
// They will be automatically exported from './generated' and './generated/model'
